
# class CustomDataset(Dataset):
#     def __init__(self, data_dir, transform=None):
#         self.data_dir = data_dir
#         self.transform = transform
#         self.images_dir = os.path.join(data_dir, 'images')  # Directory containing images
#         self.masks_dir = os.path.join(data_dir, 'masks')    # Directory containing masks
#         self.image_filenames = sorted([f for f in os.listdir(self.images_dir) if f.endswith('.JPG') or f.endswith('.jpg')])  # List of image filenames
#         self.mask_filenames = sorted([f for f in os.listdir(self.masks_dir) if f.endswith('.PNG') or f.endswith('.png')])    # List of mask filenames

#     def __len__(self):
#         return len(self.image_filenames)  # Assuming number of images equals number of masks

#     def __getitem__(self, idx):
#         # Load image and mask based on index
#         img_name = os.path.join(self.images_dir, self.image_filenames[idx])
#         mask_name = os.path.join(self.masks_dir, self.mask_filenames[idx])
        
#         # Open image and mask using PIL
#         image = Image.open(img_name).convert('RGB')
#         mask = Image.open(mask_name).convert('L')  # Convert to grayscale mask

#         # Pad the image to achieve 572x572 size
#         image = pad(image, (2, 2))  # Pad with 2 pixels on all sides
        
#         if self.transform:
#             # Apply transformations if provided
#             image = self.transform(image)
#             mask = self.transform(mask)
        
#         # print(image.size())
#         assert image.size() == (572, 572, 3)

#         return image, mask